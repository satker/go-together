/*
 * This file is generated by jOOQ.
 */
package org.go.together.repository.tables;


import org.go.together.repository.DefaultSchema;
import org.go.together.repository.Indexes;
import org.go.together.repository.Keys;
import org.go.together.repository.tables.records.InterestRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.12.3"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Interest extends TableImpl<InterestRecord> {

    private static final long serialVersionUID = -827585324;

    /**
     * The reference instance of <code>INTEREST</code>
     */
    public static final Interest INTEREST = new Interest();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InterestRecord> getRecordType() {
        return InterestRecord.class;
    }

    /**
     * The column <code>INTEREST.ID</code>.
     */
    public final TableField<InterestRecord, String> ID = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>INTEREST.NAME</code>.
     */
    public final TableField<InterestRecord, String> NAME = createField(DSL.name("NAME"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>INTEREST</code> table reference
     */
    public Interest() {
        this(DSL.name("INTEREST"), null);
    }

    /**
     * Create an aliased <code>INTEREST</code> table reference
     */
    public Interest(String alias) {
        this(DSL.name(alias), INTEREST);
    }

    /**
     * Create an aliased <code>INTEREST</code> table reference
     */
    public Interest(Name alias) {
        this(alias, INTEREST);
    }

    private Interest(Name alias, Table<InterestRecord> aliased) {
        this(alias, aliased, null);
    }

    private Interest(Name alias, Table<InterestRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Interest(Table<O> child, ForeignKey<O, InterestRecord> key) {
        super(child, key, INTEREST);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRIMARY_KEY_5);
    }

    @Override
    public UniqueKey<InterestRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_5;
    }

    @Override
    public List<UniqueKey<InterestRecord>> getKeys() {
        return Arrays.<UniqueKey<InterestRecord>>asList(Keys.CONSTRAINT_5);
    }

    @Override
    public Interest as(String alias) {
        return new Interest(DSL.name(alias), this);
    }

    @Override
    public Interest as(Name alias) {
        return new Interest(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Interest rename(String name) {
        return new Interest(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Interest rename(Name name) {
        return new Interest(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
