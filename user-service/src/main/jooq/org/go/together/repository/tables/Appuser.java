/*
 * This file is generated by jOOQ.
 */
package org.go.together.repository.tables;


import org.go.together.repository.DefaultSchema;
import org.go.together.repository.Indexes;
import org.go.together.repository.Keys;
import org.go.together.repository.tables.records.AppuserRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.12.3"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Appuser extends TableImpl<AppuserRecord> {

    /**
     * The reference instance of <code>APPUSER</code>
     */
    public static final Appuser APPUSER = new Appuser();
    private static final long serialVersionUID = 1973943372;
    /**
     * The column <code>APPUSER.ID</code>.
     */
    public final TableField<AppuserRecord, String> ID = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");
    /**
     * The column <code>APPUSER.DESCRIPTION</code>.
     */
    public final TableField<AppuserRecord, String> DESCRIPTION = createField(DSL.name("DESCRIPTION"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");
    /**
     * The column <code>APPUSER.FIRSTNAME</code>.
     */
    public final TableField<AppuserRecord, String> FIRSTNAME = createField(DSL.name("FIRSTNAME"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");
    /**
     * The column <code>APPUSER.LASTNAME</code>.
     */
    public final TableField<AppuserRecord, String> LASTNAME = createField(DSL.name("LASTNAME"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");
    /**
     * The column <code>APPUSER.LOCATIONID</code>.
     */
    public final TableField<AppuserRecord, String> LOCATIONID = createField(DSL.name("LOCATIONID"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");
    /**
     * The column <code>APPUSER.LOGIN</code>.
     */
    public final TableField<AppuserRecord, String> LOGIN = createField(DSL.name("LOGIN"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");
    /**
     * The column <code>APPUSER.MAIL</code>.
     */
    public final TableField<AppuserRecord, String> MAIL = createField(DSL.name("MAIL"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");
    /**
     * The column <code>APPUSER.PASSWORD</code>.
     */
    public final TableField<AppuserRecord, String> PASSWORD = createField(DSL.name("PASSWORD"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");
    /**
     * The column <code>APPUSER.PHOTOID</code>.
     */
    public final TableField<AppuserRecord, String> PHOTOID = createField(DSL.name("PHOTOID"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");
    /**
     * The column <code>APPUSER.ROLE</code>.
     */
    public final TableField<AppuserRecord, String> ROLE = createField(DSL.name("ROLE"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>APPUSER</code> table reference
     */
    public Appuser() {
        this(DSL.name("APPUSER"), null);
    }

    /**
     * Create an aliased <code>APPUSER</code> table reference
     */
    public Appuser(String alias) {
        this(DSL.name(alias), APPUSER);
    }

    /**
     * Create an aliased <code>APPUSER</code> table reference
     */
    public Appuser(Name alias) {
        this(alias, APPUSER);
    }

    private Appuser(Name alias, Table<AppuserRecord> aliased) {
        this(alias, aliased, null);
    }

    private Appuser(Name alias, Table<AppuserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Appuser(Table<O> child, ForeignKey<O, AppuserRecord> key) {
        super(child, key, APPUSER);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AppuserRecord> getRecordType() {
        return AppuserRecord.class;
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRIMARY_KEY_F);
    }

    @Override
    public UniqueKey<AppuserRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_F;
    }

    @Override
    public List<UniqueKey<AppuserRecord>> getKeys() {
        return Arrays.<UniqueKey<AppuserRecord>>asList(Keys.CONSTRAINT_F);
    }

    @Override
    public Appuser as(String alias) {
        return new Appuser(DSL.name(alias), this);
    }

    @Override
    public Appuser as(Name alias) {
        return new Appuser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Appuser rename(String name) {
        return new Appuser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Appuser rename(Name name) {
        return new Appuser(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<String, String, String, String, String, String, String, String, String, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
