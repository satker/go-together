/*
 * This file is generated by jOOQ.
 */
package org.go.together.repository.tables;


import org.go.together.repository.DefaultSchema;
import org.go.together.repository.Indexes;
import org.go.together.repository.Keys;
import org.go.together.repository.tables.records.AppuserLanguageRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.12.3"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class AppuserLanguage extends TableImpl<AppuserLanguageRecord> {

    /**
     * The reference instance of <code>APPUSER_LANGUAGE</code>
     */
    public static final AppuserLanguage APPUSER_LANGUAGE = new AppuserLanguage();
    private static final long serialVersionUID = -1909406427;
    /**
     * The column <code>APPUSER_LANGUAGE.APPUSER_ID</code>.
     */
    public final TableField<AppuserLanguageRecord, String> APPUSER_ID = createField(DSL.name("APPUSER_ID"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");
    /**
     * The column <code>APPUSER_LANGUAGE.LANGUAGES_ID</code>.
     */
    public final TableField<AppuserLanguageRecord, String> LANGUAGES_ID = createField(DSL.name("LANGUAGES_ID"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * Create a <code>APPUSER_LANGUAGE</code> table reference
     */
    public AppuserLanguage() {
        this(DSL.name("APPUSER_LANGUAGE"), null);
    }

    /**
     * Create an aliased <code>APPUSER_LANGUAGE</code> table reference
     */
    public AppuserLanguage(String alias) {
        this(DSL.name(alias), APPUSER_LANGUAGE);
    }

    /**
     * Create an aliased <code>APPUSER_LANGUAGE</code> table reference
     */
    public AppuserLanguage(Name alias) {
        this(alias, APPUSER_LANGUAGE);
    }

    private AppuserLanguage(Name alias, Table<AppuserLanguageRecord> aliased) {
        this(alias, aliased, null);
    }

    private AppuserLanguage(Name alias, Table<AppuserLanguageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> AppuserLanguage(Table<O> child, ForeignKey<O, AppuserLanguageRecord> key) {
        super(child, key, APPUSER_LANGUAGE);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AppuserLanguageRecord> getRecordType() {
        return AppuserLanguageRecord.class;
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FK2NEKN68EYN2CVQK4S480SRYNP_INDEX_D, Indexes.FKQCLSSGWN43V98PP5WIDS6GKSF_INDEX_D, Indexes.PRIMARY_KEY_D);
    }

    @Override
    public UniqueKey<AppuserLanguageRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_D;
    }

    @Override
    public List<UniqueKey<AppuserLanguageRecord>> getKeys() {
        return Arrays.<UniqueKey<AppuserLanguageRecord>>asList(Keys.CONSTRAINT_D);
    }

    @Override
    public List<ForeignKey<AppuserLanguageRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AppuserLanguageRecord, ?>>asList(Keys.FKQCLSSGWN43V98PP5WIDS6GKSF, Keys.FK2NEKN68EYN2CVQK4S480SRYNP);
    }

    public Appuser appuser() {
        return new Appuser(this, Keys.FKQCLSSGWN43V98PP5WIDS6GKSF);
    }

    public Language language() {
        return new Language(this, Keys.FK2NEKN68EYN2CVQK4S480SRYNP);
    }

    @Override
    public AppuserLanguage as(String alias) {
        return new AppuserLanguage(DSL.name(alias), this);
    }

    @Override
    public AppuserLanguage as(Name alias) {
        return new AppuserLanguage(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AppuserLanguage rename(String name) {
        return new AppuserLanguage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AppuserLanguage rename(Name name) {
        return new AppuserLanguage(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
