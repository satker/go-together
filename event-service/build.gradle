
buildscript {
    ext {
        springBootVersion = '2.3.0.RELEASE'
        springCloudVersion = '2.2.2.RELEASE'
        lombokVersion='1.18.16'
        postgresDriver='42.2.18'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}
plugins {
    id 'java'
}

group 'org.go.together'
version '1.0.1.SNAPSHOT'

apply plugin: 'java'
//apply plugin: 'jacoco'
apply plugin: 'org.springframework.boot'
//apply plugin: "com.palantir.docker"

repositories {
    mavenCentral()
}

sourceCompatibility = 14
targetCompatibility = 14

dependencies {
    compile (
            "org.springframework.boot:spring-boot-starter-web:${springBootVersion}",
            "org.springframework.boot:spring-boot-starter-test:${springBootVersion}",
            "org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}",
            "org.postgresql:postgresql:${postgresDriver}",

            "org.springframework.cloud:spring-cloud-starter-config:${springCloudVersion}",
            "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:${springCloudVersion}",

            "org.projectlombok:lombok:${lombokVersion}"
    )

    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    compile project(":event-service-client")
    compile project(":user-service-client")
    compile project(":location-service-client")
    compile project(":common-service:notification-service")
}
test {
    useJUnitPlatform()
}
/*
tasks.getByName("docker").dependsOn("build")

test.testLogging.showStandardStreams = true

docker {
    name "${group}/${rootProject.name}"
    tags 'latest', "$version"
    files jar.archivePath
    buildArgs(['JAR_FILE' : "${jar.archiveName}"])
}

task docker_backend
tasks.getByName("docker_backend").dependsOn("docker")

jacoco {
    toolVersion = '0.7.9'
}

jacocoTestReport {
    group = "Reporting"
    reports {
        xml.enabled true
        csv.enabled false
        html.destination "${buildDir}/reports/coverage"
    }
}

clean.doFirst {
    delete "${rootDir}\\out"
    println "delete ${rootDir}\\out"
}
*/
